<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="w-full mx-auto">
  <div class="text-center mb-10">
    <h1 class="text-3xl md:text-4xl font-extrabold text-red-800">Quick Count Real-Time</h1>
    <p class="mt-2 text-lg text-red-700">Perolehan suara terkini â€” diperbarui otomatis</p>
  </div>

  <!-- Tabel Quick Count -->
  <div id="quickCountContainer" class="bg-white rounded-lg shadow-md overflow-hidden mb-10">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-red-800 text-white">
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">No.</th>
          <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Nama Kandidat</th>
          <th class="px-6 py-3 text-center text-xs font-medium uppercase tracking-wider">Jumlah Suara</th>
        </tr>
      </thead>
      <tbody id="kandidatList" class="bg-white divide-y divide-gray-200">
      </tbody>
    </table>
    <div id="loading" class="text-center py-6 text-gray-500 hidden">Memuat data...</div>
    <div id="empty" class="text-center py-6 text-gray-500 hidden">Belum ada kandidat.</div>
  </div>

  <!-- Grafik Persentase -->
  <div class="bg-white rounded-lg shadow-md p-6">
    <h2 class="text-xl font-bold text-center text-gray-800 mb-4">Persentase Suara</h2>
    <div class="relative h-64 w-full">
      <canvas id="suaraChart"></canvas>
    </div>
  </div>

  <div class="mt-8 text-center">
    <a href="/kandidat" class="inline-block bg-red-700 text-white font-semibold py-2 px-6 rounded-lg hover:bg-red-800 transition-colors shadow-md">
      Kembali ke Daftar Kandidat
    </a>
  </div>
</div>

<script>
  let suaraChart = null;

  // Fungsi untuk merender daftar kandidat & update chart
  function renderKandidat(kandidatList) {
    const tbody = document.getElementById("kandidatList");
    const emptyEl = document.getElementById("empty");
    const loadingEl = document.getElementById("loading");

    loadingEl.classList.add("hidden");

    if (!kandidatList || kandidatList.length === 0) {
      emptyEl.classList.remove("hidden");
      tbody.innerHTML = "";
      updateChart([]); // Kosongkan chart
      return;
    }

    emptyEl.classList.add("hidden");
    tbody.innerHTML = kandidatList.map((k, index) => `
      <tr class="hover:bg-gray-50 transition-colors">
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${index + 1}</td>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700 font-semibold capitalize">${k.nama || 'â€”'}</td>
        <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-bold text-red-700">
          ${k.suara || 0}
        </td>
      </tr>
    `).join('');
    updateChart(kandidatList);
  }
  
  // Hitung total suara & persentase, lalu update chart
  function updateChart(kandidatList) {
    const total = kandidatList.reduce((sum, k) => sum + (k.suara || 0), 0);

    const labels = kandidatList.map(k => `No. ${k.nomor || k.id} - ${k.nama}`);
    const suara = kandidatList.map(k => k.suara || 0);
    const persentase = kandidatList.map(k => total === 0 ? 0 : ((k.suara / total) * 100).toFixed(1));
    
    const backgroundColors = [
      'rgba(236, 72, 153)',
      'rgba(22, 163, 74',
      'rgba(6, 182, 212)',
      'rgba(248, 113, 113, 0.7)',
      'rgba(254, 202, 202, 0.7)'
    ];

    const data = {
      labels: labels,
      datasets: [{
        label: 'Persentase Suara',
        data: suara,
        backgroundColor: backgroundColors.slice(0, kandidatList.length),
        borderColor: 'rgba(0, 0, 0, 0.1)',
        borderWidth: 1,
        hoverOffset: 10
      }]
    };

    const config = {
      type: 'pie',
      data: data,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top',
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const label = context.label || '';
                const value = context.raw || 0;
                const pct = total === 0 ? '0%' : ((value / total) * 100).toFixed(1) + '%';
                return `${label}: ${value} suara (${pct})`;
              }
            }
          }
        }
      }
    };

    const ctx = document.getElementById('suaraChart').getContext('2d');

    // Hancurkan chart lama jika ada
    if (suaraChart) {
      suaraChart.destroy();
    }

    suaraChart = new Chart(ctx, config);
  }

  // Ambil data awal dari server
  function fetchInitialData() {
    const loadingEl = document.getElementById("loading");
    loadingEl.classList.remove("hidden");

    fetch("/api/kandidat")
      .then(res => res.json())
      .then(data => {
        if (data.success && Array.isArray(data.data)) {
          renderKandidat(data.data);
        } else {
          document.getElementById("empty").classList.remove("hidden");
          updateChart([]);
        }
      })
      .catch(err => {
        console.error("Gagal memuat data awal:", err);
        document.getElementById("empty").classList.remove("hidden");
        updateChart([]);
      });
  }

  // Inisialisasi saat DOM siap
  document.addEventListener("DOMContentLoaded", () => {
    fetchInitialData();

    const socket = io();
    socket.on("updateCounter", () => {
      console.log("ðŸ”” Menerima updateCounter, memperbarui data...");
      fetchInitialData();
    });
  });
</script>